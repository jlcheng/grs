#+ARCHIVE: %s_done::
#+STARTUP: content
#+PRIORITIES: A E C
* // C-c C-z add notes
* // C-c / t TODO only
* // M-Shift-Ret add new TODO
* // S-TAB cycle folding
* == Dev Plan
* TODO UX: Add an -init option that creates a mock ~/.grs.d/config.json
* TODO UX: Repos that are "behind" with only untracked changes should be eligible for auto-forward
* TODO DEV: Move code that sets MergeCnt into AutoFFerge and add test case
* TODO UX: Print error messsage when .grs.json is missing a ',' - now it just silently fails (user, "why is it not using the repos in the file?")
* DONE DEV: Manually gofmt all files
* DONE BUG: Handle case when the current branch is untracked (took only 40 minutes)
* DONE DEV: Rename grs.go: repoTwo to repo or something similar
* TODO UX: logging.Info should output only when running from cli
* TODO Rename grs.Command to something that is not so much like 'Cmd'
* TODO DEV: Decouple persistence of user config from repo_metadata
* TODO DEV: Rename DBService to DBRepository
* DONE DEV: Rewrite TestContext as Exec
  - Note taken on [2018-06-13 Wed 07:08] \\
    https://blog.golang.org/errors-are-values
* DONE DEV: Rename gittest/fstest_context.go to grstest/exec.go
* DONE DEV: CommandRunner.Command() should return a Command interface
* DONE DEV: Rewrite InitTest1 to use panic/recover instead of multiple 'return error'
* TODO DEV: Consider moving foo_test.go files to their respective packages
* TODO UX: Instead of fs-copying repos for rebasing, consider using git clone
* DONE DEV: AutoRebase() to return err instead of printing to stdout
* DONE DEV: TestAutoRebase_Test1 must validate AutoRebase() did not yield a git error
* TODO DEV: Consider moving integration tests (TestAutoRebase_Test1) to IT directory
* TODO DEV: Functions like AutoRebase should take "upstream" as a parameter. 
  - Note taken on [2018-05-14 Mon 10:52] \\
    This allows for doing things like 
    
    1. grs -d will rebase 'head of master on local file system' against 'head of <integration branch> on <team repo>'
    2. grs -d will then rebase 'master on local file system' against 'master on <official repo>'
    
    and
    
    1. grs -d will rebase 'currently checked-out branch' against 'master on on local file system'
    2. followed by rebasing 'currently checked-out branch' against 'master on <integration branch> on <team repo>'
